// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	asset "google.golang.org/genproto/googleapis/cloud/asset/v1"
)

// MockAssetRepository is an autogenerated mock type for the AssetRepository type
type MockAssetRepository struct {
	mock.Mock
}

// SearchAllBuckets provides a mock function with given fields:
func (_m *MockAssetRepository) SearchAllBuckets() ([]*asset.ResourceSearchResult, error) {
	ret := _m.Called()

	var r0 []*asset.ResourceSearchResult
	if rf, ok := ret.Get(0).(func() []*asset.ResourceSearchResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*asset.ResourceSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAllFirewalls provides a mock function with given fields:
func (_m *MockAssetRepository) SearchAllFirewalls() ([]*asset.ResourceSearchResult, error) {
	ret := _m.Called()

	var r0 []*asset.ResourceSearchResult
	if rf, ok := ret.Get(0).(func() []*asset.ResourceSearchResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*asset.ResourceSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAllInstances provides a mock function with given fields:
func (_m *MockAssetRepository) SearchAllInstances() ([]*asset.ResourceSearchResult, error) {
	ret := _m.Called()

	var r0 []*asset.ResourceSearchResult
	if rf, ok := ret.Get(0).(func() []*asset.ResourceSearchResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*asset.ResourceSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAllRouters provides a mock function with given fields:
func (_m *MockAssetRepository) SearchAllRouters() ([]*asset.ResourceSearchResult, error) {
	ret := _m.Called()

	var r0 []*asset.ResourceSearchResult
	if rf, ok := ret.Get(0).(func() []*asset.ResourceSearchResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*asset.ResourceSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
